package org.platypus.modules.parser

import org.platypus.core.orm.Model
import org.platypus.core.orm.fields.PlatypusBooleanProperty
import org.platypus.core.orm.methods.*
import org.platypus.modules.base.Partner
import org.platypus.modules.base.ResLang
import platypus.entity.PartnerCategorieEntity
import platypus.entity.PartnerEntity
import platypus.entity.PartnerTagsEntity
import platypus.entity.PartnerTitleEntity

/**
 * @author chmuchme
 * @since 0.1
 * on 10/10/17.
 */
object Partner : Model<PartnerEntity>() {
    //Simple String Field
    val name = field.string()
    //Compute String Field
    val displayName = compute(field.string())
    val ref = computeStore(field.string(string = "Internal Reference"))
    val date = field.date()
    val title = field.many2one("title") of PartnerTitle
    val parent = field.many2one("parent") of Partner
    val parentName = field.string("Parent name", readonly = true/*, related= arrayOf("parent", "name")*/)
    val email = field.string("Email", maxSize = 64, required = true)
    val childIds = field.one2many("childIds") of Partner.id
    val lang = field.many2one("Language") of ResLang


    val onChangeName = name.onChange { e, ctx ->
        ctx.withContext("TOTO" to 5).Super(e)
    }

    val onChangeMultiProperty = newMethod.group(displayName, email).onChange(this::onChangeTest)

    private fun onChangeTest(e: PartnerEntity, ctx: OnChangeResult<PartnerEntity>) {

    }


    val multiNoReturn = newMethod.multi { e, p: MethodParamsTest, s ->
        s.Super(e, p)
    }

    val multiWithReturn = newMethod.multi(MethodReturnTest::class) { e, p: MethodParamsTest, s ->
        s.Super(e, p) // implicit return
    }

    val oneNoReturn = newMethod.one(MethodParamsTest::class) { e, p, s ->
        s.Super(e, p)
    }

    val oneWithReturn = newMethod.one(MethodParamsTest::class, MethodReturnTest::class) { e, p, s ->
        s.Super(e, p) // implicit return
    }

    val staticNoReturn = newMethod.static(MethodParamsTest::class) { p, s ->
        s.Super(p)
    }

    val staticWithReturn = newMethod.static(MethodParamsTest::class, MethodReturnTest::class) { p, s ->
        s.Super(p) // implicit return
    }

    val compute_get_name = displayName.getter { e, c -> c.Super(e) }
    val compute_set_name = displayName.setter { e, v, c -> c.Super(e, v) }

    val compute_get_ref = ref.getter { e, c -> c.Super(e) }
    val compute_set_ref = ref.setter { e, v, c -> c.Super(e, v) }


}